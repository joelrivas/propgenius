"""Main Dashboard"""

import os
import streamlit as st
from google import genai
from rag_core.pipeline import load_and_vectorize_data
from rag_core.generator import generate_rag_prompt
from rag_core.evaluator import evaluate_faithfulness

# --- 0. CONFIGURACI√ìN E INICIALIZACI√ìN DE ESTADO ---
st.set_page_config(layout="wide")
st.title("üè° PropGenius: Generador de Prompts Inmobiliarios (RAG)")
st.markdown("### Arquitectura Modular: Ingesta, Generaci√≥n y Testing.")

# Inicializar estados de sesi√≥n si no existen
if 'client' not in st.session_state:
    st.session_state.client = None
if 'vectorstore_db' not in st.session_state:
    st.session_state.vectorstore_db = None
if 'api_key_set' not in st.session_state:
    st.session_state.api_key_set = False

# --- 1. BARRA LATERAL PARA INPUT DE API KEY Y DATOS ---

st.sidebar.header("üîë Configuraci√≥n y Clave API")
API_KEY = st.sidebar.text_input(
    "Google AI API Key:", 
    type="password",
    help="Introduce tu clave. No se guarda."
)
st.sidebar.markdown("[Get a Gemini API key](https://aistudio.google.com/app/api-keys)")

if not st.session_state.api_key_set and API_KEY:
    try:
        # Intentar inicializar el cliente con la clave proporcionada
        os.environ["GOOGLE_API_KEY"] = API_KEY
        client = genai.Client(api_key=API_KEY)
        st.session_state.client = client
        st.session_state.api_key_set = True

        # Cargar la base de conocimiento vectorizada una vez que el cliente est√° listo
        with st.spinner('Cargando la Arquitectura RAG... (Simulaci√≥n ETL)'):
            st.session_state.vectorstore_db = load_and_vectorize_data(client=client)

        st.sidebar.success("Conexi√≥n y RAG Pipeline listos. ¬°Procede con los datos!")
        # Forzar un rerun para actualizar la UI principal
        st.rerun()

    except genai.errors.APIError as e:
        st.sidebar.error(f"Error al inicializar: Verifica tu clave API. Detalles: {e}")
        st.session_state.api_key_set = False
        st.session_state.client = None

# --- 2. L√ìGICA DE LA APLICACI√ìN PRINCIPAL ---

if not st.session_state.api_key_set:
    st.info("Introduce tu Google AI API Key en la barra lateral para comenzar.")
else:
    # Si todo est√° inicializado, mostramos el formulario
    st.sidebar.header("üìù Datos de la Propiedad")
    with st.sidebar.form("property_form"):
        propiedad_tipo = st.selectbox("Tipo de Propiedad", ["Casa", "Departamento", "Terreno"])
        propiedad_ubicacion = st.text_input("Ubicaci√≥n", "Condesa, CDMX")
        propiedad_caracteristicas = st.text_area("Caracter√≠sticas Clave",
                                                 "3 rec√°maras, terraza, seguridad 24h.")
        propiedad_publico = st.selectbox("Tono/P√∫blico Objetivo",
                                         ["Familias con ni√±os", "Ejecutivos j√≥venes"])
        submitted = st.form_submit_button("‚ú® Generar Prompt y Evaluar")

    if submitted:
        if not all([propiedad_ubicacion, propiedad_caracteristicas]):
            st.warning("Por favor, completa la ubicaci√≥n y las caracter√≠sticas.")
            st.stop()

        propiedad_data = {
            'type': propiedad_tipo,
            'location': propiedad_ubicacion,
            'charact': propiedad_caracteristicas,
            'audience': propiedad_publico
        }

        client = st.session_state.client
        vectorstore_db = st.session_state.vectorstore_db

        # 2.1 Ejecuci√≥n del Pipeline RAG (Generator)
        with st.spinner('1. Ejecutando el ML Pipeline RAG...'):
            generated_copy, context_used, query_str = generate_rag_prompt(
                client, vectorstore_db, propiedad_data)

        st.success("‚úÖ Prompt de Venta Generado:")
        st.markdown(generated_copy)

        st.divider()

        # 2.2 Ejecuci√≥n del Testing (Evaluator)
        st.subheader("üìä Testing de Calidad del Output (Evaluaci√≥n LLM)")

        col1, col2 = st.columns([1, 2])

        with col1:
            with st.spinner('2. Corriendo prueba de Fidelidad (Faithfulness)...'):
                evaluation_result = evaluate_faithfulness(
                    client, query_str, context_used, generated_copy)

            score = evaluation_result.get('fidelidad_score', 0)
            justification = evaluation_result.get('justification', 'No disponible.')

            if score == 1:
                st.metric(label="Fidelidad al Contexto Hist√≥rico",
                          value="ALTA ‚úÖ", delta="Previene Alucinaciones")
            else:
                st.metric(label="Fidelidad al Contexto Hist√≥rico",
                          value="BAJA ‚ùå", delta="Posible Alucinaci√≥n")

        with col2:
            st.info(f"**Justificaci√≥n del LLM Evaluador (Gemini Pro):** {justification}")


        # 2.3 Documentaci√≥n del Pipeline
        st.subheader("üîé Documentaci√≥n: Trazabilidad del Dato")
        with st.expander("Ver Documentos de Contexto Hist√≥rico (Data Lineage)"):
            st.caption("Datos pasados que el modelo us√≥ como referencia (context):")
            st.code(context_used, language='text')
